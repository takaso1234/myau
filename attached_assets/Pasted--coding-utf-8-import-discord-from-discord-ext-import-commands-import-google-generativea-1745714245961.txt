# -*- coding: utf-8 -*-
import discord
from discord.ext import commands
import google.generativeai as genai
import traceback
import sys

# Input API key and token
print("Enter Gemini API Key (visible input): ")
GEMINI_API_KEY = input().strip()
print("Enter Discord Bot Token (visible input): ")
DISCORD_TOKEN = input().strip()

# Check API key and token
if not GEMINI_API_KEY:
    raise ValueError("Gemini API key is not provided")
if not DISCORD_TOKEN:
    raise ValueError("Discord token is not provided")

# Configure Gemini API
genai.configure(api_key=GEMINI_API_KEY)

# Discord bot setup
intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True  # Enable voice state intents for mute
bot = commands.Bot(command_prefix='!', intents=intents)

# Bot ready event
@bot.event
async def on_ready():
    print(f'{bot.user} has connected to Discord!')

# !gemini command
@bot.command(name='gemini')
async def gemini_chat(ctx, *, message):
    try:
        # Initialize Gemini model
        model = genai.GenerativeModel('gemini-1.5-flash')
        # Send message to Gemini API
        response = model.generate_content(
            [
                {"role": "model", "parts": ["あなたは親しみやすい日本語アシスタントです。自然でフレンドリーに応答してください。"]},
                {"role": "user", "parts": [message]}
            ],
            generation_config={
                "max_output_tokens": 1000,
                "temperature": 0.7
            }
        )
        # Send response to Discord (handle 2000 character limit)
        reply = response.text
        if len(reply) > 2000:
            for i in range(0, len(reply), 2000):
                await ctx.send(reply[i:i+2000])
        else:
            await ctx.send(reply)
    except Exception as e:
        error_message = f"エラーが発生しました: {str(e)}"
        await ctx.send(error_message)
        print(error_message)
        traceback.print_exc(file=sys.stdout)

# !nuke command
@bot.command(name='nuke')
@commands.has_permissions(manage_messages=True)
async def nuke(ctx):
    try:
        # Check if bot has manage_messages permission
        if not ctx.channel.permissions_for(ctx.guild.me).manage_messages:
            await ctx.send("ボットにメッセージ管理権限がありません！")
            return
        # Purge all messages in the channel
        deleted = await ctx.channel.purge(limit=None)
        await ctx.send(f"チャンネルをクリアしました！ {len(deleted)} 件のメッセージを削除。")
    except discord.errors.Forbidden:
        await ctx.send("ボットにメッセージを削除する権限がありません！")
    except Exception as e:
        error_message = f"エラーが発生しました: {str(e)}"
        await ctx.send(error_message)
        print(error_message)
        traceback.print_exc(file=sys.stdout)

# Handle missing permissions for !nuke
@nuke.error
async def nuke_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("あなたにメッセージ管理権限がありません！")
    else:
        await ctx.send(f"エラーが発生しました: {str(error)}")

# !言論統制 command
@bot.command(name='言論統制')
async def speech_control(ctx):
    try:
        # Check if bot has mute_members permission
        if not ctx.guild.me.guild_permissions.mute_members:
            await ctx.send("ボットにメンバーをミュートする権限がありません！サーバーの権限設定を確認してください。")
            return
        # Find the user by ID
        target_user = ctx.guild.get_member(860507172835033118)  # yayoi.12's user ID
        if not target_user:
            await ctx.send("指定されたユーザー（ID: 860507172835033118）が見つかりません！サーバーに参加しているか確認してください。")
            return
        # Check if user is in a voice channel
        if not target_user.voice or not target_user.voice.channel:
            await ctx.send(f"ユーザー {target_user.name} はボイスチャンネルに接続していません！")
            return
        # Check role hierarchy
        if ctx.guild.me.top_role <= target_user.top_role:
            await ctx.send(f"ボットのロールが {target_user.name} のロール以下です！ボットのロールを上位に設定してください。")
            return
        # Mute the user (server-wide speaker mute)
        await target_user.edit(mute=True)
        await ctx.send(f"ユーザー {target_user.name} をスピーカーミュートしました！")
    except discord.errors.Forbidden:
        await ctx.send("ボットにメンバーをミュートする権限がありません！サーバーの権限設定を確認してください。")
    except Exception as e:
        error_message = f"エラーが発生しました: {str(e)}"
        await ctx.send(error_message)
        print(error_message)
        traceback.print_exc(file=sys.stdout)

# !暑くないわ command
@bot.command(name='暑くないわ')
@commands.has_permissions(administrator=True)
async def mute_all(ctx):
    try:
        # Check if bot has mute_members permission
        if not ctx.guild.me.guild_permissions.mute_members:
            await ctx.send("ボットにメンバーをミュートする権限がありません！サーバーの権限設定を確認してください。")
            return
        # Get the voice channel by ID
        voice_channel = ctx.guild.get_channel(1350092524127125538)
        if not voice_channel:
            await ctx.send("指定されたチャンネル（ID: 1350092524127125538）が見つかりません！")
            return
        if not isinstance(voice_channel, discord.VoiceChannel):
            await ctx.send("指定されたチャンネル（ID: 1350092524127125538）はボイスチャンネルではありません！")
            return
        # Check if there are members in the voice channel
        if not voice_channel.members:
            await ctx.send("ボイスチャンネルに誰も接続していません！")
            return
        # Mute all members in the voice channel
        for member in voice_channel.members:
            # Check role hierarchy
            if ctx.guild.me.top_role <= member.top_role:
                await ctx.send(f"ボットのロールが {member.name} のロール以下です！ボットのロールを上位に設定してください。")
                continue
            await member.edit(mute=True)
        await ctx.send(f"ボイスチャンネル {voice_channel.name} まかそ軍全員突撃！")
    except discord.errors.Forbidden:
        await ctx.send("ボットにメンバーをミュートする権限がありません！サーバーの権限設定を確認してください。")
    except Exception as e:
        error_message = f"エラーが発生しました: {str(e)}"
        await ctx.send(error_message)
        print(error_message)
        traceback.print_exc(file=sys.stdout)

# !解除 command
@bot.command(name='解除')
@commands.has_permissions(administrator=True)
async def unmute_all(ctx):
    try:
        # Check if bot has mute_members permission
        if not ctx.guild.me.guild_permissions.mute_members:
            await ctx.send("ボットにメンバーをミュートする権限がありません！サーバーの権限設定を確認してください。")
            return
        # Get the voice channel by ID
        voice_channel = ctx.guild.get_channel(1350092524127125538)
        if not voice_channel:
            await ctx.send("指定されたチャンネル（ID: 1350092524127125538）が見つかりません！")
            return
        if not isinstance(voice_channel, discord.VoiceChannel):
            await ctx.send("指定されたチャンネル（ID: 1350092524127125538）はボイスチャンネルではありません！")
            return
        # Check if there are members in the voice channel
        if not voice_channel.members:
            await ctx.send("ボイスチャンネルに誰も接続していません！")
            return
        # Unmute all members in the voice channel
        for member in voice_channel.members:
            await member.edit(mute=False)
        await ctx.send(f"ボイスチャンネル {voice_channel.name} まかそ軍全員撤退！")
    except discord.errors.Forbidden:
        await ctx.send("ボットにメンバーをミュートする権限がありません！サーバーの権限設定を確認してください。")
    except Exception as e:
        error_message = f"エラーが発生しました: {str(e)}"
        await ctx.send(error_message)
        print(error_message)
        traceback.print_exc(file=sys.stdout)

# Handle errors for !暑くないわ
@mute_all.error
async def mute_all_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("お前には無理じゃ！（笑）")
    else:
        await ctx.send(f"エラーが発生しました: {str(error)}")

# Handle errors for !解除
@unmute_all.error
async def unmute_all_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("あなたに管理者権限がありません！")
    else:
        await ctx.send(f"エラーが発生しました: {str(error)}")

# Handle errors for !言論統制
@speech_control.error
async def speech_control_error(ctx, error):
    await ctx.send(f"エラーが発生しました: {str(error)}")

# Run the bot
try:
    bot.run(DISCORD_TOKEN)
except discord.errors.LoginFailure as e:
    print("無効なDiscordトークンです。Developer Portalで新しいトークンを生成してください。")
    traceback.print_exc(file=sys.stdout)
except Exception as e:
    print("ボットの実行中に予期しないエラーが発生しました:")
    traceback.print_exc(file=sys.stdout)